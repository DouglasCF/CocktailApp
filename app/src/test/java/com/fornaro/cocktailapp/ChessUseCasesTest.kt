package com.fornaro.cocktailapp

import org.junit.Before
import org.junit.Test

class ChessUseCasesTest {

    private lateinit var useCases: ChessUseCases

    @Before
    fun setup() {
        useCases = ChessUseCases()
    }

    @Test
    fun `should be in the initial state`() {
        val game = useCases.initGame()
        game.printBoard()

        assert(game.player1.color == ColorType.White)
        assert(game.player2.color == ColorType.Black)
        assert(game.board.coordinates.size == 64)

        assert(game.board.coordinates[0].value == "a8")
        assert(game.board.coordinates[1].value == "b8")
        assert(game.board.coordinates[2].value == "c8")
        assert(game.board.coordinates[3].value == "d8")
        assert(game.board.coordinates[4].value == "e8")
        assert(game.board.coordinates[5].value == "f8")
        assert(game.board.coordinates[6].value == "g8")
        assert(game.board.coordinates[7].value == "h8")

        assert(game.board.coordinates[8].value == "a7")
        assert(game.board.coordinates[9].value == "b7")
        assert(game.board.coordinates[10].value == "c7")
        assert(game.board.coordinates[11].value == "d7")
        assert(game.board.coordinates[12].value == "e7")
        assert(game.board.coordinates[13].value == "f7")
        assert(game.board.coordinates[14].value == "g7")
        assert(game.board.coordinates[15].value == "h7")

        assert(game.board.coordinates[16].value == "a6")
        assert(game.board.coordinates[17].value == "b6")
        assert(game.board.coordinates[18].value == "c6")
        assert(game.board.coordinates[19].value == "d6")
        assert(game.board.coordinates[20].value == "e6")
        assert(game.board.coordinates[21].value == "f6")
        assert(game.board.coordinates[22].value == "g6")
        assert(game.board.coordinates[23].value == "h6")

        assert(game.board.coordinates[24].value == "a5")
        assert(game.board.coordinates[25].value == "b5")
        assert(game.board.coordinates[26].value == "c5")
        assert(game.board.coordinates[27].value == "d5")
        assert(game.board.coordinates[28].value == "e5")
        assert(game.board.coordinates[29].value == "f5")
        assert(game.board.coordinates[30].value == "g5")
        assert(game.board.coordinates[31].value == "h5")

        assert(game.board.coordinates[32].value == "a4")
        assert(game.board.coordinates[33].value == "b4")
        assert(game.board.coordinates[34].value == "c4")
        assert(game.board.coordinates[35].value == "d4")
        assert(game.board.coordinates[36].value == "e4")
        assert(game.board.coordinates[37].value == "f4")
        assert(game.board.coordinates[38].value == "g4")
        assert(game.board.coordinates[39].value == "h4")

        assert(game.board.coordinates[40].value == "a3")
        assert(game.board.coordinates[41].value == "b3")
        assert(game.board.coordinates[42].value == "c3")
        assert(game.board.coordinates[43].value == "d3")
        assert(game.board.coordinates[44].value == "e3")
        assert(game.board.coordinates[45].value == "f3")
        assert(game.board.coordinates[46].value == "g3")
        assert(game.board.coordinates[47].value == "h3")

        assert(game.board.coordinates[48].value == "a2")
        assert(game.board.coordinates[49].value == "b2")
        assert(game.board.coordinates[50].value == "c2")
        assert(game.board.coordinates[51].value == "d2")
        assert(game.board.coordinates[52].value == "e2")
        assert(game.board.coordinates[53].value == "f2")
        assert(game.board.coordinates[54].value == "g2")
        assert(game.board.coordinates[55].value == "h2")

        assert(game.board.coordinates[56].value == "a1")
        assert(game.board.coordinates[57].value == "b1")
        assert(game.board.coordinates[58].value == "c1")
        assert(game.board.coordinates[59].value == "d1")
        assert(game.board.coordinates[60].value == "e1")
        assert(game.board.coordinates[61].value == "f1")
        assert(game.board.coordinates[62].value == "g1")
        assert(game.board.coordinates[63].value == "h1")

        assert(game.board.coordinates[0].color == ColorType.White)
        assert(game.board.coordinates[1].color == ColorType.Black)
        assert(game.board.coordinates[2].color == ColorType.White)
        assert(game.board.coordinates[3].color == ColorType.Black)
        assert(game.board.coordinates[4].color == ColorType.White)
        assert(game.board.coordinates[5].color == ColorType.Black)
        assert(game.board.coordinates[6].color == ColorType.White)
        assert(game.board.coordinates[7].color == ColorType.Black)

        assert(game.board.coordinates[8].color == ColorType.Black)
        assert(game.board.coordinates[9].color == ColorType.White)
        assert(game.board.coordinates[10].color == ColorType.Black)
        assert(game.board.coordinates[11].color == ColorType.White)
        assert(game.board.coordinates[12].color == ColorType.Black)
        assert(game.board.coordinates[13].color == ColorType.White)
        assert(game.board.coordinates[14].color == ColorType.Black)
        assert(game.board.coordinates[15].color == ColorType.White)

        assert(game.board.coordinates[16].color == ColorType.White)
        assert(game.board.coordinates[17].color == ColorType.Black)
        assert(game.board.coordinates[18].color == ColorType.White)
        assert(game.board.coordinates[19].color == ColorType.Black)
        assert(game.board.coordinates[20].color == ColorType.White)
        assert(game.board.coordinates[21].color == ColorType.Black)
        assert(game.board.coordinates[22].color == ColorType.White)
        assert(game.board.coordinates[23].color == ColorType.Black)

        assert(game.board.coordinates[24].color == ColorType.Black)
        assert(game.board.coordinates[25].color == ColorType.White)
        assert(game.board.coordinates[26].color == ColorType.Black)
        assert(game.board.coordinates[27].color == ColorType.White)
        assert(game.board.coordinates[28].color == ColorType.Black)
        assert(game.board.coordinates[29].color == ColorType.White)
        assert(game.board.coordinates[30].color == ColorType.Black)
        assert(game.board.coordinates[31].color == ColorType.White)

        assert(game.board.coordinates[32].color == ColorType.White)
        assert(game.board.coordinates[33].color == ColorType.Black)
        assert(game.board.coordinates[34].color == ColorType.White)
        assert(game.board.coordinates[35].color == ColorType.Black)
        assert(game.board.coordinates[36].color == ColorType.White)
        assert(game.board.coordinates[37].color == ColorType.Black)
        assert(game.board.coordinates[38].color == ColorType.White)
        assert(game.board.coordinates[39].color == ColorType.Black)

        assert(game.board.coordinates[40].color == ColorType.Black)
        assert(game.board.coordinates[41].color == ColorType.White)
        assert(game.board.coordinates[42].color == ColorType.Black)
        assert(game.board.coordinates[43].color == ColorType.White)
        assert(game.board.coordinates[44].color == ColorType.Black)
        assert(game.board.coordinates[45].color == ColorType.White)
        assert(game.board.coordinates[46].color == ColorType.Black)
        assert(game.board.coordinates[47].color == ColorType.White)

        assert(game.board.coordinates[48].color == ColorType.White)
        assert(game.board.coordinates[49].color == ColorType.Black)
        assert(game.board.coordinates[50].color == ColorType.White)
        assert(game.board.coordinates[51].color == ColorType.Black)
        assert(game.board.coordinates[52].color == ColorType.White)
        assert(game.board.coordinates[53].color == ColorType.Black)
        assert(game.board.coordinates[54].color == ColorType.White)
        assert(game.board.coordinates[55].color == ColorType.Black)

        assert(game.board.coordinates[56].color == ColorType.Black)
        assert(game.board.coordinates[57].color == ColorType.White)
        assert(game.board.coordinates[58].color == ColorType.Black)
        assert(game.board.coordinates[59].color == ColorType.White)
        assert(game.board.coordinates[60].color == ColorType.Black)
        assert(game.board.coordinates[61].color == ColorType.White)
        assert(game.board.coordinates[62].color == ColorType.Black)
        assert(game.board.coordinates[63].color == ColorType.White)

        assert(game.board.coordinates[0].piece?.type == PieceType.Rook)
        assert(game.board.coordinates[0].piece?.color == ColorType.Black)
        assert(game.board.coordinates[1].piece?.type == PieceType.Knight)
        assert(game.board.coordinates[1].piece?.color == ColorType.Black)
        assert(game.board.coordinates[2].piece?.type == PieceType.Bishop)
        assert(game.board.coordinates[2].piece?.color == ColorType.Black)
        assert(game.board.coordinates[3].piece?.type == PieceType.Queen)
        assert(game.board.coordinates[3].piece?.color == ColorType.Black)
        assert(game.board.coordinates[4].piece?.type == PieceType.King)
        assert(game.board.coordinates[4].piece?.color == ColorType.Black)
        assert(game.board.coordinates[5].piece?.type == PieceType.Bishop)
        assert(game.board.coordinates[5].piece?.color == ColorType.Black)
        assert(game.board.coordinates[6].piece?.type == PieceType.Knight)
        assert(game.board.coordinates[6].piece?.color == ColorType.Black)
        assert(game.board.coordinates[7].piece?.type == PieceType.Rook)
        assert(game.board.coordinates[7].piece?.color == ColorType.Black)

        assert(game.board.coordinates[8].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[8].piece?.color == ColorType.Black)
        assert(game.board.coordinates[9].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[9].piece?.color == ColorType.Black)
        assert(game.board.coordinates[10].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[10].piece?.color == ColorType.Black)
        assert(game.board.coordinates[11].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[11].piece?.color == ColorType.Black)
        assert(game.board.coordinates[12].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[12].piece?.color == ColorType.Black)
        assert(game.board.coordinates[13].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[13].piece?.color == ColorType.Black)
        assert(game.board.coordinates[14].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[14].piece?.color == ColorType.Black)
        assert(game.board.coordinates[15].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[15].piece?.color == ColorType.Black)

        assert(game.board.coordinates[16].piece == null)
        assert(game.board.coordinates[17].piece == null)
        assert(game.board.coordinates[18].piece == null)
        assert(game.board.coordinates[19].piece == null)
        assert(game.board.coordinates[20].piece == null)
        assert(game.board.coordinates[21].piece == null)
        assert(game.board.coordinates[22].piece == null)
        assert(game.board.coordinates[23].piece == null)

        assert(game.board.coordinates[24].piece == null)
        assert(game.board.coordinates[25].piece == null)
        assert(game.board.coordinates[26].piece == null)
        assert(game.board.coordinates[27].piece == null)
        assert(game.board.coordinates[28].piece == null)
        assert(game.board.coordinates[29].piece == null)
        assert(game.board.coordinates[30].piece == null)
        assert(game.board.coordinates[31].piece == null)

        assert(game.board.coordinates[32].piece == null)
        assert(game.board.coordinates[33].piece == null)
        assert(game.board.coordinates[34].piece == null)
        assert(game.board.coordinates[35].piece == null)
        assert(game.board.coordinates[36].piece == null)
        assert(game.board.coordinates[37].piece == null)
        assert(game.board.coordinates[38].piece == null)
        assert(game.board.coordinates[39].piece == null)

        assert(game.board.coordinates[40].piece == null)
        assert(game.board.coordinates[41].piece == null)
        assert(game.board.coordinates[42].piece == null)
        assert(game.board.coordinates[43].piece == null)
        assert(game.board.coordinates[44].piece == null)
        assert(game.board.coordinates[45].piece == null)
        assert(game.board.coordinates[46].piece == null)
        assert(game.board.coordinates[47].piece == null)

        assert(game.board.coordinates[48].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[48].piece?.color == ColorType.White)
        assert(game.board.coordinates[49].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[49].piece?.color == ColorType.White)
        assert(game.board.coordinates[50].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[50].piece?.color == ColorType.White)
        assert(game.board.coordinates[51].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[51].piece?.color == ColorType.White)
        assert(game.board.coordinates[52].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[52].piece?.color == ColorType.White)
        assert(game.board.coordinates[53].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[53].piece?.color == ColorType.White)
        assert(game.board.coordinates[54].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[54].piece?.color == ColorType.White)
        assert(game.board.coordinates[55].piece?.type == PieceType.Pawn)
        assert(game.board.coordinates[55].piece?.color == ColorType.White)

        assert(game.board.coordinates[56].piece?.type == PieceType.Rook)
        assert(game.board.coordinates[56].piece?.color == ColorType.White)
        assert(game.board.coordinates[57].piece?.type == PieceType.Knight)
        assert(game.board.coordinates[57].piece?.color == ColorType.White)
        assert(game.board.coordinates[58].piece?.type == PieceType.Bishop)
        assert(game.board.coordinates[58].piece?.color == ColorType.White)
        assert(game.board.coordinates[59].piece?.type == PieceType.Queen)
        assert(game.board.coordinates[59].piece?.color == ColorType.White)
        assert(game.board.coordinates[60].piece?.type == PieceType.King)
        assert(game.board.coordinates[60].piece?.color == ColorType.White)
        assert(game.board.coordinates[61].piece?.type == PieceType.Bishop)
        assert(game.board.coordinates[61].piece?.color == ColorType.White)
        assert(game.board.coordinates[62].piece?.type == PieceType.Knight)
        assert(game.board.coordinates[62].piece?.color == ColorType.White)
        assert(game.board.coordinates[63].piece?.type == PieceType.Rook)
        assert(game.board.coordinates[63].piece?.color == ColorType.White)
    }

    @Test
    fun `should move piece`() {
        val game = useCases.initGame()
        useCases.movePiece("e2", "e4")
        game.printBoard()

        assert(game.board.coordinates.find { it.value == "e2" }?.piece == null)
        assert(game.board.coordinates.find { it.value == "e4" }?.piece != null)
    }
}